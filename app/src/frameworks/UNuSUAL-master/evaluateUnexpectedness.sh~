#!/bin/bash
export LC_ALL=C
export LANG=C

##################################################################################################
### Obtain input parameters creating the output folders
##################################################################################################

#Include the configuration file
source config

#checking the files of consumption, features, recommendation and ppm
cd Metrics;
correct=`python check_consumption_file.py ${history}`
if [[ ${correct} == "0" ]]; then
	echo "History Consumption file is not in the correct format."
	exit;
fi
correct=`python check_features_file.py ${featuresfile}`
if [[ ${correct} == "0" ]]; then
	echo "Features file is not in the correct format."
	exit;
fi
correct=`python check_recommendation.py ${recommendation} ${top}`
if [[ ${correct} == "0" ]]; then
	echo "Recommendation file is not in the correct format."
	exit;
fi
correct=`python check_recommendation.py ${ppm} ${top}`
if [[ ${correct} == "0" ]]; then
	echo "PPM file is not in the correct format."
	exit;
fi
echo "All files checked"
cd ..;


#Creating folder for results
mkdir -p ${outputpath}/${outputname};
mkdir -p ${outputpath}/${outputname}/Metrics;
mkdir -p ${outputpath}/${outputname}/Metrics/Metrics;
mkdir -p ${outputpath}/${outputname}/Metrics/Normalized;
mkdir -p ${outputpath}/${outputname}/Results;
mkdir -p ${outputpath}/${outputname}/Results/StatisticalSummarization;
mkdir -p ${outputpath}/${outputname}/Results/StatisticalAnalysis;
mkdir -p ${outputpath}/${outputname}/Results/SimilarityAnalysis;
mkdir -p ${outputpath}/${outputname}/Results/Combination;

##################################################################################################
### Step 1 - Calculating the metrics
##################################################################################################

echo "Step 1 - Calculating the Unexpectedness Metrics"

#Calcuate each metric
cd Metrics;
for metric in $metrics; do
	echo "--Metric ${metric}"
	if [[ ${metric} == "1" ]]; then
		python metric1.py ${recommendation} ${ppm} ${history} ${top} ${outputpath}/${outputname}/Metrics/metric1.out
	elif [[ ${metric} == "2" ]]; then
		python metric2.py ${recommendation} ${ppm} ${history} ${top} ${outputpath}/${outputname}/Metrics/metric2.out
	elif [[ ${metric} == "3" ]]; then
		python metric3.py ${recommendation} ${history} ${top} ${featuresfile} ${outputpath}/${outputname}/Metrics/metric3.out
	elif [[ ${metric} == "4" ]]; then
		python metric4.py ${recommendation} ${history} ${top} ${featuresfile} ${outputpath}/${outputname}/Metrics/metric4.out
	elif [[ ${metric} == "5" ]]; then
		python metric5.py ${recommendation} ${ppm} ${history} ${featuresfile} ${top} ${outputpath}/${outputname}/Metrics/metric5.out
	fi

	#organize the information
	mv  ${outputpath}/${outputname}/Metrics/metric${metric}.out ${outputpath}/${outputname}/Metrics/Metrics/metric${metric}.out
	mv  ${outputpath}/${outputname}/Metrics/metric${metric}_normalized.out ${outputpath}/${outputname}/Metrics/Normalized/metric${metric}_normalized.out
done

echo "--Combining metrics"
metrics_join=""
metrics_join_normalized=""
for metric in $metrics; do
	metrics_join+="${outputpath}/${outputname}/Metrics/Metrics/metric${metric}.out "
	metrics_join_normalized+="${outputpath}/${outputname}/Metrics/Normalized/metric${metric}_normalized.out "
done
python join_files.py ${outputpath}/${outputname}/Metrics/Metrics/combined_metrics_notnormalised.txt ${metrics_join}
python join_files.py ${outputpath}/${outputname}/Metrics/Normalized/combined_metrics.txt ${metrics_join_normalized}

##################################################################################################
### Step 2 - Executing characterization
##################################################################################################

echo "Step 2 - Characterization Process"

#Executing the statistical summarization
if [[ ${statisticalSummarization} == "1" ]]; then
	echo "--Executing Statistical Summarization."

	#Calculating the mean
	cd StatisticalSummarization;
	if [[ ${mean} == '1' ]]; then
		echo "----Calculating the Mean."
		python mean.py ${outputpath}/${outputname}/Metrics/Normalized/combined_metrics.txt ${outputpath}/${outputname}/Results/StatisticalSummarization/mean.txt
	else
		echo "----Mean Calculus Skipped."
	fi

	#Calculating the Median
	if [[ ${median} == '1' ]]; then
		echo "----Calculating the Median."
		python median.py ${outputpath}/${outputname}/Metrics/Normalized/combined_metrics.txt ${outputpath}/${outputname}/Results/StatisticalSummarization/median.txt
	else
		echo "----Median Calculus Skipped."
	fi

	#Calculating the Standard Deviation
	if [[ ${sd} == '1' ]]; then
		echo "----Calculating the Standard Deviation."
		python sd.py ${outputpath}/${outputname}/Metrics/Normalized/combined_metrics.txt ${outputpath}/${outputname}/Results/StatisticalSummarization/sd.txt
	else
		echo "----Standard Deviation Calculus Skipped."
	fi

	#Calculating the Rank
	if [[ ${rank} == '1' ]]; then
		echo "----Calculating the Rank."
		python ranked_ratings.py ${outputpath}/${outputname}/Metrics/Normalized/combined_metrics.txt ${outputpath}/${outputname}/Results/StatisticalSummarization/ranked_metrics.txt
	else
		echo "----Rank Calculus Skipped."
	fi

else
	echo "--Statistical Summarization Skipped."
fi

#Executing the statistical analysis
if [[ ${statisticalAnalysis} == "1" ]]; then
	echo "--Executing Statistical Analysis on the Behaviour of the metrics."

	#Calculating the item popularity
	cd ../StatisticalAnalysis;
	if [[ ${itemPopularity} == '1' ]]; then
		echo "----Calculating the Item Popularity."
		python popularity.py ${outputpath}/${outputname}/Metrics/Normalized/combined_metrics.txt ${recommendation} ${history} ${outputpath}/${outputname}/Results/StatisticalAnalysis/popularity.txt ${binSize}
	else
		echo "----Item Popularity Skipped."
	fi

	#Calculating the History Size
	if [[ ${historysize} == '1' ]]; then
		echo "----Calculating the History Size."
		python history_size.py ${outputpath}/${outputname}/Metrics/Normalized/combined_metrics.txt ${history} ${outputpath}/${outputname}/Results/StatisticalAnalysis/history_size.txt ${binSize}
	else
		echo "----History Size Skipped."
	fi

	#Calculating the User Bias
	if [[ ${userbias} == '1' ]]; then
		echo "----Calculating the User Bias."
		python average_rating.py ${outputpath}/${outputname}/Metrics/Normalized/combined_metrics.txt ${history} ${outputpath}/${outputname}/Results/StatisticalAnalysis/user_bias.txt ${binSize}
	else
		echo "----User Bias Skipped."
	fi

else
	echo "--Statistical Analysis Skipped."
fi

#Executing the Similarity
if [[ ${similarity} == "1" ]]; then
	echo "--Executing Similarity Analysis."

	#Calculating the item popularity
	cd ../SimilarityAnalysis;

	#Calculating the kendall correlation
	if [[ ${kendall} == '1' ]]; then
		python correlation.py ${outputpath}/${outputname}/Results/SimilarityAnalysis kendall ${metrics_join}
	fi 

	#Calculating the kendall correlation
	if [[ ${pearson} == '1' ]]; then
		python correlation.py ${outputpath}/${outputname}/Results/SimilarityAnalysis pearson ${metrics_join}
	fi 

	#Calculating the spearman correlation
	if [[ ${spearman} == '1' ]]; then
		python correlation.py ${outputpath}/${outputname}/Results/SimilarityAnalysis pearson ${metrics_join}
	fi 

else
	echo "--Similarity Analysis Skipped."
fi

##################################################################################################
### Step 3 - Executing combination
##################################################################################################

#Executing the Combination
if [[ ${combination} == "1" ]]; then
	echo "--Executing Combination."

	#Calculating the svd
	cd ../Combination;
	if [[ ${svd} == '1' ]]; then
		echo "----Calculating SVD."
		Rscript svd.r ${outputpath}/${outputname}/Metrics/Metrics/combined_metrics_notnormalised.txt ${outputpath}/${outputname}/Metrics/Metrics/svd_notnormalised.out > ${outputpath}/${outputname}/Results/Combination/svd_stats.out
	else
		echo "----SVD Skipped."
	fi

	#Calculating the PCA
	if [[ ${pca} == '1' ]]; then
		echo "----Calculating PCA."
		Rscript pca.r  ${outputpath}/${outputname}/Metrics/Metrics/combined_metrics_notnormalised.txt ${outputpath}/${outputname}/Metrics/Metrics/pca_notnormalised.out > ${outputpath}/${outputname}/Results/Combination/pca_stats.out
	else
		echo "----PCA Skipped."
	fi

	#Calculating the PCA
	if [[ ${kpca} == '1' ]]; then
		echo "----Calculating KPCA."
		Rscript kpca.r ${outputpath}/${outputname}/Metrics/Metrics/combined_metrics_notnormalised.txt ${outputpath}/${outputname}/Metrics/Metrics/kpca_notnormalised.out ${kernel} > ${outputpath}/${outputname}/Results/Combination/kpca_stats.out
	else
		echo "----KPCA Skipped."
	fi

else
	echo "--Combination Skipped."
fi

